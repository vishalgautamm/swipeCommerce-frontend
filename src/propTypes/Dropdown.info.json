{
  "displayName": "Dropdown",
  "props": [
    {
      "type": "element|string",
      "required": false,
      "description": [
        "Label prefixed to an option added by a user."
      ],
      "defaultValue": "'Add '",
      "tags": [],
      "value": [],
      "name": "additionLabel"
    },
    {
      "type": "enum",
      "required": false,
      "description": [
        "Position of the `Add: ...` option in the dropdown list ('top' or 'bottom')."
      ],
      "defaultValue": "'top'",
      "tags": [],
      "value": [
        "top",
        "bottom"
      ],
      "name": "additionPosition"
    },
    {
      "type": "custom",
      "required": false,
      "description": [
        "Allow user additions to the list of options (boolean).",
        "Requires the use of `selection`, `options` and `search`."
      ],
      "tags": [],
      "name": "allowAdditions"
    },
    {
      "type": "custom",
      "required": false,
      "description": [
        "An element type to render as (string or function)."
      ],
      "tags": [],
      "name": "as"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A Dropdown can reduce its complexity."
      ],
      "tags": [],
      "name": "basic"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Format the Dropdown to appear as a button."
      ],
      "tags": [],
      "name": "button"
    },
    {
      "type": "custom",
      "required": false,
      "description": [
        "Primary content."
      ],
      "tags": [],
      "name": "children"
    },
    {
      "type": "string",
      "required": false,
      "description": [
        "Additional classes."
      ],
      "tags": [],
      "name": "className"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Whether or not the menu should close when the dropdown is blurred."
      ],
      "defaultValue": "true",
      "tags": [],
      "name": "closeOnBlur"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Whether or not the menu should close when a value is selected from the dropdown.",
        "By default, multiple selection dropdowns will remain open on change, while single",
        "selection dropdowns will close on change."
      ],
      "tags": [],
      "name": "closeOnChange"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A compact dropdown has no minimum width."
      ],
      "tags": [],
      "name": "compact"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Whether or not the dropdown should strip diacritics in options and input search"
      ],
      "defaultValue": "false",
      "tags": [],
      "name": "deburr"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Initial value of open."
      ],
      "tags": [],
      "name": "defaultOpen"
    },
    {
      "type": "string",
      "required": false,
      "description": [
        "Initial value of searchQuery."
      ],
      "tags": [],
      "name": "defaultSearchQuery"
    },
    {
      "type": "custom",
      "required": false,
      "description": [
        "Currently selected label in multi-select."
      ],
      "tags": [],
      "name": "defaultSelectedLabel"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Initial value of upward."
      ],
      "tags": [],
      "name": "defaultUpward"
    },
    {
      "type": "number|string|bool|arrayOf",
      "required": false,
      "description": [
        "Initial value or value array if multiple."
      ],
      "tags": [],
      "value": [],
      "name": "defaultValue"
    },
    {
      "type": "enum",
      "required": false,
      "description": [
        "A dropdown menu can open to the left or to the right."
      ],
      "tags": [],
      "value": [
        "left",
        "right"
      ],
      "name": "direction"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A disabled dropdown menu or item does not allow user interaction."
      ],
      "tags": [],
      "name": "disabled"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "An errored dropdown can alert a user to a problem."
      ],
      "tags": [],
      "name": "error"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A dropdown menu can contain floated content."
      ],
      "tags": [],
      "name": "floating"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A dropdown can take the full width of its parent"
      ],
      "tags": [],
      "name": "fluid"
    },
    {
      "type": "node",
      "required": false,
      "description": [
        "A dropdown menu can contain a header."
      ],
      "tags": [],
      "name": "header"
    },
    {
      "type": "node|object",
      "required": false,
      "description": [
        "Shorthand for Icon."
      ],
      "defaultValue": "'dropdown'",
      "tags": [],
      "value": [],
      "name": "icon"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A dropdown can be formatted to appear inline in other content."
      ],
      "tags": [],
      "name": "inline"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A dropdown can be formatted as a Menu item."
      ],
      "tags": [],
      "name": "item"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A dropdown can be labeled."
      ],
      "tags": [],
      "name": "labeled"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A dropdown can defer rendering its options until it is open."
      ],
      "tags": [],
      "name": "lazyLoad"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A dropdown can show that it is currently loading data."
      ],
      "tags": [],
      "name": "loading"
    },
    {
      "type": "number",
      "required": false,
      "description": [
        "The minimum characters for a search to begin showing results."
      ],
      "defaultValue": "1",
      "tags": [],
      "name": "minCharacters"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A selection dropdown can allow multiple selections."
      ],
      "tags": [],
      "name": "multiple"
    },
    {
      "type": "string",
      "required": false,
      "description": [
        "Message to display when there are no results."
      ],
      "defaultValue": "'No results found.'",
      "tags": [],
      "name": "noResultsMessage"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called when a user adds a new item. Use this to update the options list."
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props and the new item's value.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onAddItem"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called on blur."
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onBlur"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called when the user attempts to change the value."
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props and proposed value.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onChange"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called on click."
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onClick"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called when a close event happens."
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onClose"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called on focus."
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onFocus"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called when a multi-select label is clicked."
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All label props.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onLabelClick"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called on mousedown."
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onMouseDown"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called when an open event happens."
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onOpen"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called on search input change."
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props, includes current value of searchQuery.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onSearchChange"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the dropdown menu is displayed."
      ],
      "tags": [],
      "name": "open"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Whether or not the menu should open when the dropdown is focused."
      ],
      "defaultValue": "true",
      "tags": [],
      "name": "openOnFocus"
    },
    {
      "type": "custom",
      "required": false,
      "description": [
        "Array of Dropdown.Item props e.g. `{ text: '', value: '' }`"
      ],
      "tags": [],
      "name": "options"
    },
    {
      "type": "string",
      "required": false,
      "description": [
        "Placeholder text."
      ],
      "tags": [],
      "name": "placeholder"
    },
    {
      "type": "bool|enum",
      "required": false,
      "description": [
        "A dropdown can be formatted so that its menu is pointing."
      ],
      "tags": [],
      "value": [
        "left",
        "right",
        "top",
        "top left",
        "top right",
        "bottom",
        "bottom left",
        "bottom right"
      ],
      "name": "pointing"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Mapped over the active items and returns shorthand for the active item Labels.",
        "Only applies to `multiple` Dropdowns."
      ],
      "defaultValue": "({ text }) => text",
      "tags": [
        {
          "title": "param",
          "description": "A currently active dropdown item.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "item"
        },
        {
          "title": "param",
          "description": "The current index.",
          "type": {
            "type": "NameExpression",
            "name": "number"
          },
          "name": "index"
        },
        {
          "title": "param",
          "description": "The default props for an active item Label.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "defaultLabelProps"
        },
        {
          "title": "returns",
          "description": "Shorthand for a Label.",
          "type": {
            "type": "AllLiteral"
          }
        }
      ],
      "name": "renderLabel"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A dropdown can have its menu scroll."
      ],
      "tags": [],
      "name": "scrolling"
    },
    {
      "type": "bool|func",
      "required": false,
      "description": [
        "A selection dropdown can allow a user to search through a large list of choices.",
        "Pass a function here to replace the default search."
      ],
      "tags": [],
      "value": [],
      "name": "search"
    },
    {
      "type": "array|node|object",
      "required": false,
      "description": [
        "A shorthand for a search input."
      ],
      "defaultValue": "'text'",
      "tags": [],
      "value": [],
      "name": "searchInput"
    },
    {
      "type": "string",
      "required": false,
      "description": [
        "Current value of searchQuery. Creates a controlled component."
      ],
      "tags": [],
      "name": "searchQuery"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Define whether the highlighted item should be selected on blur."
      ],
      "defaultValue": "true",
      "tags": [],
      "name": "selectOnBlur"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Whether or not to change the value when navigating the menu using arrow keys.",
        "Setting to false will require enter or left click to confirm a choice."
      ],
      "defaultValue": "true",
      "tags": [],
      "name": "selectOnNavigation"
    },
    {
      "type": "custom",
      "required": false,
      "description": [
        "Currently selected label in multi-select."
      ],
      "tags": [],
      "name": "selectedLabel"
    },
    {
      "type": "custom",
      "required": false,
      "description": [
        "A dropdown can be used to select between choices in a form."
      ],
      "tags": [],
      "name": "selection"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A simple dropdown can open without Javascript."
      ],
      "tags": [],
      "name": "simple"
    },
    {
      "type": "number|string",
      "required": false,
      "description": [
        "A dropdown can receive focus."
      ],
      "tags": [],
      "value": [],
      "name": "tabIndex"
    },
    {
      "type": "string",
      "required": false,
      "description": [
        "The text displayed in the dropdown, usually for the active item."
      ],
      "tags": [],
      "name": "text"
    },
    {
      "type": "custom",
      "required": false,
      "description": [
        "Custom element to trigger the menu to become visible. Takes place of 'text'."
      ],
      "tags": [],
      "name": "trigger"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether the dropdown will open upward."
      ],
      "tags": [],
      "name": "upward"
    },
    {
      "type": "bool|string|number|arrayOf",
      "required": false,
      "description": [
        "Current value or value array if multiple. Creates a controlled component."
      ],
      "tags": [],
      "value": [],
      "name": "value"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "A dropdown will go to the last element when ArrowUp is pressed on the first,",
        "or go to the first when ArrowDown is pressed on the last( aka infinite selection )"
      ],
      "defaultValue": "true",
      "tags": [],
      "name": "wrapSelection"
    }
  ],
  "constructorName": "Dropdown",
  "type": "module",
  "isParent": true,
  "isChild": false,
  "parentDisplayName": null,
  "subcomponentName": null,
  "subcomponents": [
    "DropdownDivider",
    "DropdownHeader",
    "DropdownItem",
    "DropdownMenu",
    "DropdownSearchInput"
  ],
  "apiPath": "Dropdown",
  "componentClassName": "dropdown",
  "docblock": {
    "tags": [
      {
        "title": "see",
        "description": "Form"
      },
      {
        "title": "see",
        "description": "Select"
      },
      {
        "title": "see",
        "description": "Menu"
      }
    ],
    "description": [
      "A dropdown allows a user to select a value from a series of options."
    ]
  },
  "examplesExist": true,
  "repoPath": "src/modules/Dropdown/Dropdown.js",
  "filename": "Dropdown.js",
  "filenameWithoutExt": "Dropdown"
}