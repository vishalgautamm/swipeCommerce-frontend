{
  "displayName": "Portal",
  "props": [
    {
      "type": "node",
      "required": true,
      "description": [
        "Primary content."
      ],
      "tags": [],
      "name": "children"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the portal should close when the document is clicked."
      ],
      "defaultValue": "true",
      "tags": [],
      "name": "closeOnDocumentClick"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the portal should close when escape is pressed is displayed."
      ],
      "defaultValue": "true",
      "tags": [],
      "name": "closeOnEscape"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the portal should close when mousing out of the portal.",
        "NOTE: This will prevent `closeOnTriggerMouseLeave` when mousing over the",
        "gap from the trigger to the portal."
      ],
      "tags": [],
      "name": "closeOnPortalMouseLeave"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the portal should close on blur of the trigger."
      ],
      "tags": [],
      "name": "closeOnTriggerBlur"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the portal should close on click of the trigger."
      ],
      "tags": [],
      "name": "closeOnTriggerClick"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the portal should close when mousing out of the trigger."
      ],
      "tags": [],
      "name": "closeOnTriggerMouseLeave"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Initial value of open."
      ],
      "tags": [],
      "name": "defaultOpen"
    },
    {
      "type": "string",
      "required": false,
      "description": [
        "Event pool namespace that is used to handle component events"
      ],
      "defaultValue": "'default'",
      "tags": [],
      "name": "eventPool"
    },
    {
      "type": "any",
      "required": false,
      "description": [
        "The node where the portal should mount."
      ],
      "tags": [],
      "name": "mountNode"
    },
    {
      "type": "number",
      "required": false,
      "description": [
        "Milliseconds to wait before opening on mouse over"
      ],
      "tags": [],
      "name": "mouseEnterDelay"
    },
    {
      "type": "number",
      "required": false,
      "description": [
        "Milliseconds to wait before closing on mouse leave"
      ],
      "tags": [],
      "name": "mouseLeaveDelay"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called when a close event happens"
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onClose"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called when the portal is mounted on the DOM."
      ],
      "tags": [],
      "name": "onMount"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called when an open event happens"
      ],
      "tags": [
        {
          "title": "param",
          "description": "React's original SyntheticEvent.",
          "type": {
            "type": "NameExpression",
            "name": "SyntheticEvent"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "All props.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "data"
        }
      ],
      "name": "onOpen"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called when the portal is unmounted from the DOM."
      ],
      "tags": [],
      "name": "onUnmount"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the portal is displayed."
      ],
      "tags": [],
      "name": "open"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the portal should open when the trigger is clicked."
      ],
      "defaultValue": "true",
      "tags": [],
      "name": "openOnTriggerClick"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the portal should open on focus of the trigger."
      ],
      "tags": [],
      "name": "openOnTriggerFocus"
    },
    {
      "type": "bool",
      "required": false,
      "description": [
        "Controls whether or not the portal should open when mousing over the trigger."
      ],
      "tags": [],
      "name": "openOnTriggerMouseEnter"
    },
    {
      "type": "node",
      "required": false,
      "description": [
        "Element to be rendered in-place where the portal is defined."
      ],
      "tags": [],
      "name": "trigger"
    },
    {
      "type": "func",
      "required": false,
      "description": [
        "Called with a ref to the trigger node."
      ],
      "tags": [
        {
          "title": "param",
          "description": "Referred node.",
          "type": {
            "type": "NameExpression",
            "name": "HTMLElement"
          },
          "name": "node"
        }
      ],
      "name": "triggerRef"
    }
  ],
  "constructorName": "Portal",
  "type": "addon",
  "isParent": true,
  "isChild": false,
  "parentDisplayName": null,
  "subcomponentName": null,
  "subcomponents": [
    "PortalInner"
  ],
  "apiPath": "Portal",
  "componentClassName": "portal",
  "docblock": {
    "tags": [
      {
        "title": "see",
        "description": "Modal"
      },
      {
        "title": "see",
        "description": "Popup"
      },
      {
        "title": "see",
        "description": "Dimmer"
      },
      {
        "title": "see",
        "description": "Confirm"
      }
    ],
    "description": [
      "A component that allows you to render children outside their parent."
    ]
  },
  "examplesExist": true,
  "repoPath": "src/addons/Portal/Portal.js",
  "filename": "Portal.js",
  "filenameWithoutExt": "Portal"
}